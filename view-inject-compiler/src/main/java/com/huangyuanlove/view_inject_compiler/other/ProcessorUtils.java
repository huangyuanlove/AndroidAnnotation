package com.huangyuanlove.view_inject_compiler.other;


import com.huangyuanlove.view_inject_annotation.ViewInject;
import com.huangyuanlove.view_inject_compiler.ClassValidator;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.Messager;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

public class ProcessorUtils {

    private static final String JAVA_DOC = "Generated by apt. Do not modify!\n";
    private static final String PROXY = "InjectView";

    private Messager messager;
    private Elements elementUtils;

    private Map<String, TypeSpec.Builder> proxyTypeSpecMap = new HashMap<>();
    private Map<String, MethodSpec.Builder> proxyMethodSpec = new HashMap<>();

    public ProcessorUtils(Messager messager, Elements elementUtils) {
        this.messager = messager;
        this.elementUtils = elementUtils;
    }


    public void process(Set<? extends TypeElement> set, RoundEnvironment roundEnvironment) {

        Set<? extends Element> elements = roundEnvironment.getElementsAnnotatedWith(ViewInject.class);

        for (Element element : elements) {

            //获取注解所在的类名
            String hostName = element.getEnclosingElement().toString();
            System.out.println("---hostName---");
            System.out.println(hostName);

            String viewInjectClassName = element.getEnclosingElement().getSimpleName().toString() + "$$" + PROXY;
            System.out.println("---hostInjectName---");
            System.out.println(viewInjectClassName);

            String fieldName = element.getSimpleName().toString();
            System.out.println("---host field name---");
            System.out.println(fieldName);

            String packageName = elementUtils.getPackageOf(element.getEnclosingElement()).getQualifiedName().toString();
            System.out.println("--- packageName name---");
            System.out.println(packageName);

            ViewInject viewInject = element.getAnnotation(ViewInject.class);
            System.out.println("---ViewInject value---");
            System.out.println(viewInject.id());
            System.out.println(viewInject.idStr());



            ClassName injectViewParam = ClassName.get((TypeElement)element.getEnclosingElement());
            System.out.println("---injectViewParam value---");
            System.out.println(injectViewParam.simpleName());


            System.out.println("-----------\n\n");





            checkAnnotationValid(element, ViewInject.class);

            VariableElement variableElement = (VariableElement) element;
            TypeElement classElement = (TypeElement) variableElement.getEnclosingElement();



            ClassName paramsWrapper = ClassName.get(classElement);


            CodeBlock codeBlock = CodeBlock.builder()
                    .add(code(viewInject, variableElement.getSimpleName().toString(), variableElement.asType().toString()).toString())
                    .build();


            MethodSpec.Builder methodSpecBuilder = proxyMethodSpec.get(hostName);

            if (methodSpecBuilder == null) {
                methodSpecBuilder = MethodSpec.methodBuilder("injectView")
                        .addAnnotation(Override.class)
                        .addModifiers(Modifier.PUBLIC)
                        .returns(void.class)
                        .addParameter(paramsWrapper, "host")
                        .addParameter(Object.class, "source");
                proxyMethodSpec.put(hostName, methodSpecBuilder);
            }
            methodSpecBuilder.addCode(codeBlock);




            TypeSpec.Builder typeSpecBuilder = proxyTypeSpecMap.get(hostName);

            if (typeSpecBuilder == null) {
                typeSpecBuilder = TypeSpec.classBuilder(ClassValidator.getClassName(classElement, packageName) + "$$" + PROXY)
                        .addJavadoc(JAVA_DOC);
                proxyTypeSpecMap.put(hostName, typeSpecBuilder);
            }

        }


        System.out.println(proxyTypeSpecMap.size());

        for (Map.Entry<String, TypeSpec.Builder> entry : proxyTypeSpecMap.entrySet()) {




            System.out.println(entry.getKey());
            System.out.println(entry.getValue().build());
        }


    }


    private StringBuilder code(ViewInject inject, String name, String type) {
        StringBuilder builder = new StringBuilder();
        builder.append(" if(source instanceof android.app.Activity){\n");
        builder.append("int id = 0;\n");
        if (inject.id() == -1) {
            builder.append("id =(((android.app.Activity)source).getResources().getIdentifier(\"");
            builder.append(inject.idStr());
            builder.append("\",\"id\", ((android.app.Activity)source).getPackageName()));\n");
        } else {
            builder.append("id = ");
            builder.append(inject.id());
            builder.append(";\n");
        }

        builder.append("host." + name).append(" = ");
        builder.append("(" + type + ")(((android.app.Activity)source).findViewById(  id ));\n");
        builder.append("\n}else{\n");
        builder.append("int id = 0;\n");
        if (inject.id() == -1) {
            builder.append("id =(((android.app.Activity)source).getResources().getIdentifier(\"");
            builder.append(inject.idStr());
            builder.append("\",\"id\", ((android.app.Activity)source).getPackageName()));\n");
        } else {
            builder.append("id = ");
            builder.append(inject.id());
            builder.append(";\n");
        }


        builder.append("host." + name).append(" = ");
        builder.append("(" + type + ")(((android.view.View)source).findViewById( id ));\n");
        builder.append("\n}");
        return builder;
    }


    private boolean checkAnnotationValid(Element annotatedElement, Class clazz) {
        if (annotatedElement.getKind() != ElementKind.FIELD) {
            error(annotatedElement, "%s must be declared on field.", clazz.getSimpleName());
            return false;
        }
        if (ClassValidator.isPrivate(annotatedElement)) {
            error(annotatedElement, "%s() must can not be private.", annotatedElement.getSimpleName());
            return false;
        }

        return true;
    }

    private void error(Element element, String message, Object... args) {
        if (args.length > 0) {
            message = String.format(message, args);
        }
        messager.printMessage(Diagnostic.Kind.ERROR, message, element);
    }
}
